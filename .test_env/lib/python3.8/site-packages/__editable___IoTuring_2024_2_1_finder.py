from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'IoTuring': '/home/jonas/code/IoTuring/IoTuring'}
NAMESPACES: dict[str, list[str]] = {'IoTuring.ClassManager': ['/home/jonas/code/IoTuring/IoTuring/ClassManager'], 'IoTuring.Configurator': ['/home/jonas/code/IoTuring/IoTuring/Configurator'], 'IoTuring.Entity': ['/home/jonas/code/IoTuring/IoTuring/Entity'], 'IoTuring.Exceptions': ['/home/jonas/code/IoTuring/IoTuring/Exceptions'], 'IoTuring.Logger': ['/home/jonas/code/IoTuring/IoTuring/Logger'], 'IoTuring.MyApp': ['/home/jonas/code/IoTuring/IoTuring/MyApp'], 'IoTuring.Protocols': ['/home/jonas/code/IoTuring/IoTuring/Protocols'], 'IoTuring.Settings': ['/home/jonas/code/IoTuring/IoTuring/Settings'], 'IoTuring.Warehouse': ['/home/jonas/code/IoTuring/IoTuring/Warehouse'], 'IoTuring.Entity.Deployments': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments'], 'IoTuring.Entity.ToImplement': ['/home/jonas/code/IoTuring/IoTuring/Entity/ToImplement'], 'IoTuring.Entity.Deployments.ActiveWindow': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/ActiveWindow'], 'IoTuring.Entity.Deployments.AppInfo': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/AppInfo'], 'IoTuring.Entity.Deployments.Battery': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Battery'], 'IoTuring.Entity.Deployments.BootTime': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/BootTime'], 'IoTuring.Entity.Deployments.Cpu': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Cpu'], 'IoTuring.Entity.Deployments.DesktopEnvironment': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/DesktopEnvironment'], 'IoTuring.Entity.Deployments.Disk': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Disk'], 'IoTuring.Entity.Deployments.DisplayMode': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/DisplayMode'], 'IoTuring.Entity.Deployments.Fanspeed': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Fanspeed'], 'IoTuring.Entity.Deployments.FileSwitch': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/FileSwitch'], 'IoTuring.Entity.Deployments.Hostname': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Hostname'], 'IoTuring.Entity.Deployments.Lock': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Lock'], 'IoTuring.Entity.Deployments.Monitor': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Monitor'], 'IoTuring.Entity.Deployments.Notify': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Notify'], 'IoTuring.Entity.Deployments.OperatingSystem': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/OperatingSystem'], 'IoTuring.Entity.Deployments.Power': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Power'], 'IoTuring.Entity.Deployments.Ram': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Ram'], 'IoTuring.Entity.Deployments.Temperature': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Temperature'], 'IoTuring.Entity.Deployments.Terminal': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Terminal'], 'IoTuring.Entity.Deployments.Time': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Time'], 'IoTuring.Entity.Deployments.UpTime': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/UpTime'], 'IoTuring.Entity.Deployments.Username': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Username'], 'IoTuring.Entity.Deployments.Volume': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Volume'], 'IoTuring.Entity.Deployments.Wifi': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Wifi'], 'IoTuring.Entity.Deployments.Wlrctl': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Wlrctl'], 'IoTuring.Entity.Deployments.Ydotool': ['/home/jonas/code/IoTuring/IoTuring/Entity/Deployments/Ydotool'], 'IoTuring.Entity.ToImplement.CpuTemperature': ['/home/jonas/code/IoTuring/IoTuring/Entity/ToImplement/CpuTemperature'], 'IoTuring.Entity.ToImplement.Network': ['/home/jonas/code/IoTuring/IoTuring/Entity/ToImplement/Network'], 'IoTuring.Entity.ToImplement.Screenshot': ['/home/jonas/code/IoTuring/IoTuring/Entity/ToImplement/Screenshot'], 'IoTuring.Entity.ToImplement.State': ['/home/jonas/code/IoTuring/IoTuring/Entity/ToImplement/State'], 'IoTuring.Entity.ToImplement.Brightness': ['/home/jonas/code/IoTuring/IoTuring/Entity/ToImplement/Brightness'], 'IoTuring.Protocols.MQTTClient': ['/home/jonas/code/IoTuring/IoTuring/Protocols/MQTTClient'], 'IoTuring.Settings.Deployments': ['/home/jonas/code/IoTuring/IoTuring/Settings/Deployments'], 'IoTuring.Settings.Deployments.AppSettings': ['/home/jonas/code/IoTuring/IoTuring/Settings/Deployments/AppSettings'], 'IoTuring.Settings.Deployments.LogSettings': ['/home/jonas/code/IoTuring/IoTuring/Settings/Deployments/LogSettings'], 'IoTuring.Warehouse.Deployments': ['/home/jonas/code/IoTuring/IoTuring/Warehouse/Deployments'], 'IoTuring.Warehouse.Deployments.ConsoleWarehouse': ['/home/jonas/code/IoTuring/IoTuring/Warehouse/Deployments/ConsoleWarehouse'], 'IoTuring.Warehouse.Deployments.HomeAssistantWarehouse': ['/home/jonas/code/IoTuring/IoTuring/Warehouse/Deployments/HomeAssistantWarehouse'], 'IoTuring.Warehouse.Deployments.MQTTWarehouse': ['/home/jonas/code/IoTuring/IoTuring/Warehouse/Deployments/MQTTWarehouse']}
PATH_PLACEHOLDER = '__editable__.IoTuring-2024.2.1.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
